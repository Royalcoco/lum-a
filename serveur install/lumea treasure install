// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MiningPassNFT is ERC721Enumerable, Ownable {
    uint256 public nextTokenId;
    mapping(uint256 => uint256) public miningBoost;

    constructor() ERC721("MiningPass", "MPASS") {}

    function mintMiningPass(address to, uint256 boost) external onlyOwner {
        require(boost >= 1 && boost <= 3, "Boost must be 1x, 2x or 3x");
        uint256 tokenId = nextTokenId;
        _safeMint(to, tokenId);
        miningBoost[tokenId] = boost;
        nextTokenId++;
    }

    function getBoost(uint256 tokenId) external view returns (uint256) {
        return miningBoost[tokenId];
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IMiningPassNFT {
    function getBoost(uint256 tokenId) external view returns (uint256);
}

contract CosmoCoin is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 19000000 * 10**18; // 19M unités
    uint256 public constant MINING_DURATION = 13 * 30 days; // 13 mois
    uint256 public startTime;
    IMiningPassNFT public miningPass;
    mapping(address => uint256) public lastClaimTime;
    mapping(address => uint256) public minerNFT;

    constructor(address _miningPassNFT) ERC20("CosmoCoin", "COSMO") {
        startTime = block.timestamp;
        miningPass = IMiningPassNFT(_miningPassNFT);
    }

    function registerMiner(uint256 tokenId) external {
        require(minerNFT[msg.sender] == 0, "Already registered");
        minerNFT[msg.sender] = tokenId;
    }

    function mineTokens() public {
        require(block.timestamp <= startTime + MINING_DURATION, "Mining finished");
        require(minerNFT[msg.sender] > 0, "No NFT registered for mining");

        uint256 tokenId = minerNFT[msg.sender];
        uint256 boost = miningPass.getBoost(tokenId);
        uint256 timeElapsed = block.timestamp - lastClaimTime[msg.sender];

        require(timeElapsed > 1 days, "Can only mine once per day");

        uint256 amount = calculateMiningReward(timeElapsed, boost);
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds max supply");

        lastClaimTime[msg.sender] = block.timestamp;
        _mint(msg.sender, amount);
    }

    function calculateMiningReward(uint256 timeElapsed, uint256 boost) public view returns (uint256) {
        uint256 baseReward = 10 * 10**18;
        return baseReward * boost;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MiningPassNFT is ERC721Enumerable, Ownable {
    uint256 public nextTokenId;
    mapping(uint256 => uint256) public miningBoost;
    mapping(uint256 => bool) public isUsedAsAvatar;
    mapping(address => bool) public verifiedPlatforms;

    constructor() ERC721("MiningPass", "MPASS") {}

    function mintMiningPass(address to, uint256 boost) external onlyOwner {
        require(boost >= 1 && boost <= 3, "Boost must be 1x, 2x or 3x");
        uint256 tokenId = nextTokenId;
        _safeMint(to, tokenId);
        miningBoost[tokenId] = boost;
        nextTokenId++;
    }

    function setAsAvatar(uint256 tokenId, address platform) external {
        require(ownerOf(tokenId) == msg.sender, "You must own the NFT");
        require(verifiedPlatforms[platform], "Platform not verified");
        isUsedAsAvatar[tokenId] = true;
    }

    function getBoost(uint256 tokenId) external view returns (uint256) {
        uint256 baseBoost = miningBoost[tokenId];
        if (isUsedAsAvatar[tokenId]) {
            return baseBoost * 150 / 100; // +50% de boost
        }
        return baseBoost;
    }

    function addVerifiedPlatform(address platform) external onlyOwner {
        verifiedPlatforms[platform] = true;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IMiningPassNFT {
    function getBoost(uint256 tokenId) external view returns (uint256);
}

contract CosmoCoin is ERC20, Ownable {
    uint256 public constant MAX_SUPPLY = 19000000 * 10**18; // 19M unités
    uint256 public constant MINING_DURATION = 13 * 30 days; // 13 mois
    uint256 public startTime;
    IMiningPassNFT public miningPass;
    mapping(address => uint256) public lastClaimTime;
    mapping(address => uint256) public minerNFT;

    constructor(address _miningPassNFT) ERC20("CosmoCoin", "COSMO") {
        startTime = block.timestamp;
        miningPass = IMiningPassNFT(_miningPassNFT);
    }

    function registerMiner(uint256 tokenId) external {
        require(minerNFT[msg.sender] == 0, "Already registered");
        minerNFT[msg.sender] = tokenId;
    }

    function mineTokens() public {
        require(block.timestamp <= startTime + MINING_DURATION, "Mining finished");
        require(minerNFT[msg.sender] > 0, "No NFT registered for mining");

        uint256 tokenId = minerNFT[msg.sender];
        uint256 boost = miningPass.getBoost(tokenId); // Prend en compte le bonus Avatar
        uint256 timeElapsed = block.timestamp - lastClaimTime[msg.sender];

        require(timeElapsed > 1 days, "Can only mine once per day");

        uint256 amount = calculateMiningReward(timeElapsed, boost);
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds max supply");

        lastClaimTime[msg.sender] = block.timestamp;
        _mint(msg.sender, amount);
    }

    function calculateMiningReward(uint256 timeElapsed, uint256 boost) public view returns (uint256) {
        uint256 baseReward = 10 * 10**18;
        return baseReward * boost;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MiningPassNFT is ERC721Enumerable, Ownable {
    uint256 public nextTokenId;
    mapping(uint256 => uint256) public miningBoost;
    mapping(uint256 => bool) public isUsedAsAvatar;
    mapping(address => bool) public verifiedPlatforms;

    constructor() ERC721("MiningPass", "MPASS") {}

    function mintMiningPass(address to, uint256 boost) external onlyOwner {
        require(boost >= 1 && boost <= 3, "Boost must be 1x, 2x or 3x");
        uint256 tokenId = nextTokenId;
        _safeMint(to, tokenId);
        miningBoost[tokenId] = boost;
        nextTokenId++;
    }

    function verifyAvatar(uint256 tokenId, address platform) external {
        require(ownerOf(tokenId) == msg.sender, "You must own the NFT");
        require(verifiedPlatforms[platform], "Platform not verified");
        isUsedAsAvatar[tokenId] = true;
    }

    function getBoost(uint256 tokenId) external view returns (uint256) {
        uint256 baseBoost = miningBoost[tokenId];
        if (isUsedAsAvatar[tokenId]) {
            return baseBoost * 150 / 100; // Boost de +50% si l’avatar est vérifié
        }
        return baseBoost;
    }

    function addVerifiedPlatform(address platform) external onlyOwner {
        verifiedPlatforms[platform] = true;
    }
}
