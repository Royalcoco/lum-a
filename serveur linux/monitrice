# Correction de la taille des signaux en s'assurant qu'ils ont tous la même longueur
num_samples = len(t)

# Génération d'un signal sonore basé sur la fractale de Mandelbrot
mandelbrot_values = np.interp(np.linspace(0, 1, num_samples), np.linspace(0, 1, len(mandelbrot_set.flatten())), mandelbrot_set.flatten())
mandelbrot_sound = np.sin(2 * np.pi * 440 * mandelbrot_values)

# Génération du signal sonore basé sur l'automate cellulaire (expansion des valeurs)
game_of_life_values = np.interp(np.linspace(0, 1, num_samples), np.linspace(0, 1, len(game_life_steps[-1].flatten())), game_life_steps[-1].flatten())
game_of_life_sound = np.sin(2 * np.pi * 220 * game_of_life_values)

# Génération du signal sonore basé sur le processus stochastique harmonisé
stochastic_values = np.interp(np.linspace(0, 1, num_samples), np.linspace(0, 1, len(adjusted_walk)), adjusted_walk)
stochastic_sound = np.sin(2 * np.pi * 330 * stochastic_values)

# Fusion des trois signaux pour un effet sonore analytique profond
final_signal = (mandelbrot_sound + game_of_life_sound + stochastic_sound) / 3
final_signal = final_signal / np.max(np.abs(final_signal))  # Normalisation

# Sauvegarde du fichier audio
sound_filename = "/mnt/data/analytical_sound_effect.wav"
write(sound_filename, sampling_rate, (final_signal * 32767).astype(np.int16))

# Retour du fichier audio
sound_filename
