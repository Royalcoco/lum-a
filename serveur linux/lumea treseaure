import time
import math

TOTAL_SUPPLY = 19_000_000
MINING_DURATION = 13 * 30 * 24 * 60 * 60  # 13 mois en secondes
START_TIME = time.time()
regen_factor = 1

def mining_reward(time_elapsed):
    """Rendement exponentiel du minage"""
    base_reward = 10  # 10 tokens par bloc
    return base_reward * math.exp(time_elapsed / 10**6)  # Facteur e^(x)

def mine_block(miner, blockchain):
    """Simulation d’un bloc miné"""
    current_time = time.time()
    time_elapsed = current_time - START_TIME
    reward = mining_reward(time_elapsed)
    
    if blockchain["total_mined"] + reward <= TOTAL_SUPPLY:
        blockchain["balances"][miner] += reward
        blockchain["total_mined"] += reward
        print(f"✅ {miner} a miné {reward:.2f} COSMO")
    else:
        print("⚠️ Minage terminé, plus de tokens disponibles")

# Simulation de minage sur 13 mois
blockchain = {"balances": {}, "total_mined": 0}
for i in range(400):  # Simulation de 400 blocs
    mine_block("Miner1", blockchain)
    time.sleep(5)  # Pause pour simuler le temps réel

print(f"\n🔥 Total miné : {blockchain['total_mined']:.2f} COSMO")
import Web3 from "web3";
import miningPassABI from "./MiningPassABI.json";
import cosmoCoinABI from "./CosmoCoinABI.json";

const web3 = new Web3(window.ethereum);

const miningPassAddress = "0xMiningPassContract";
const cosmoCoinAddress = "0xCosmoCoinContract";

const miningPassContract = new web3.eth.Contract(miningPassABI, miningPassAddress);
const cosmoCoinContract = new web3.eth.Contract(cosmoCoinABI, cosmoCoinAddress);

export const getMiningBoost = async (tokenId) => {
  const boost = await miningPassContract.methods.getBoost(tokenId).call();
  return boost;
};

export const mineTokens = async (account) => {
  await cosmoCoinContract.methods.mineTokens().send({ from: account });
};

export const registerMiner = async (account, tokenId) => {
  await cosmoCoinContract.methods.registerMiner(tokenId).send({ from: account });
};
import Web3 from "web3";
import miningPassABI from "./MiningPassABI.json";
import cosmoCoinABI from "./CosmoCoinABI.json";

const web3 = new Web3(window.ethereum);

const miningPassAddress = "0xMiningPassContract";
const cosmoCoinAddress = "0xCosmoCoinContract";

const miningPassContract = new web3.eth.Contract(miningPassABI, miningPassAddress);
const cosmoCoinContract = new web3.eth.Contract(cosmoCoinABI, cosmoCoinAddress);

export const setNFTAsAvatar = async (account, tokenId, platformAddress) => {
  await miningPassContract.methods.setAsAvatar(tokenId, platformAddress).send({ from: account });
};

export const getMiningBoost = async (tokenId) => {
  const boost = await miningPassContract.methods.getBoost(tokenId).call();
  return boost;
};

export const mineTokens = async (account) => {
  await cosmoCoinContract.methods.mineTokens().send({ from: account });
};
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const Web3 = require('web3');

const app = express();
app.use(express.json());

const NFT_CONTRACT = "0xVotreSmartContract";
const provider = new Web3.providers.HttpProvider(process.env.INFURA_URL);
const web3 = new Web3(provider);
const nftContract = new web3.eth.Contract(require('./MiningPassABI.json'), NFT_CONTRACT);

const TWITTER_BEARER_TOKEN = process.env.TWITTER_BEARER_TOKEN;
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;

// Vérifie l'avatar sur Twitter
app.post('/verify/twitter', async (req, res) => {
    const { twitterHandle, walletAddress } = req.body;

    try {
        const response = await axios.get(`https://api.twitter.com/2/users/by/username/${twitterHandle}?user.fields=profile_image_url`, {
            headers: { "Authorization": `Bearer ${TWITTER_BEARER_TOKEN}` }
        });

        const avatarUrl = response.data.data.profile_image_url;
        const tokenId = await checkNFTAvatar(walletAddress, avatarUrl);

        if (tokenId !== null) {
            await nftContract.methods.verifyAvatar(tokenId, "Twitter").send({ from: walletAddress });
            res.json({ success: true, message: "Avatar vérifié sur Twitter !" });
        } else {
            res.status(400).json({ success: false, message: "Aucun NFT correspondant à l'avatar." });
        }
    } catch (error) {
        res.status(500).json({ success: false, message: "Erreur Twitter API", error: error.message });
    }
});

// Vérifie l'avatar sur Discord
app.post('/verify/discord', async (req, res) => {
    const { discordId, walletAddress } = req.body;

    try {
        const response = await axios.get(`https://discord.com/api/users/${discordId}`, {
            headers: { "Authorization": `Bot ${DISCORD_BOT_TOKEN}` }
        });

        const avatarHash = response.data.avatar;
        const avatarUrl = `https://cdn.discordapp.com/avatars/${discordId}/${avatarHash}.png`;

        const tokenId = await checkNFTAvatar(walletAddress, avatarUrl);

        if (tokenId !== null) {
            await nftContract.methods.verifyAvatar(tokenId, "Discord").send({ from: walletAddress });
            res.json({ success: true, message: "Avatar vérifié sur Discord !" });
        } else {
            res.status(400).json({ success: false, message: "Aucun NFT correspondant à l'avatar." });
        }
    } catch (error) {
        res.status(500).json({ success: false, message: "Erreur Discord API", error: error.message });
    }
});

// Vérifie si l'avatar correspond à un NFT
async function checkNFTAvatar(walletAddress, avatarUrl) {
    const tokenIds = await nftContract.methods.tokensOfOwner(walletAddress).call();

    for (let tokenId of tokenIds) {
        const nftMetadata = await axios.get(`https://api.opensea.io/api/v1/asset/${NFT_CONTRACT}/${tokenId}/`);
        if (nftMetadata.data.image_url === avatarUrl) {
            return tokenId;
        }
    }
    return null;
}

app.listen(3000, () => console.log('🚀 Serveur en ligne sur http://localhost:3000'));
import { useState } from 'react';

const VerifyAvatar = ({ walletAddress }) => {
    const [status, setStatus] = useState("");

    const verifyTwitter = async (twitterHandle) => {
        const res = await fetch("/verify/twitter", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ twitterHandle, walletAddress })
        });
        const data = await res.json();
        setStatus(data.message);
    };

    const verifyDiscord = async (discordId) => {
        const res = await fetch("/verify/discord", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ discordId, walletAddress })
        });
        const data = await res.json();
        setStatus(data.message);
    };

    return (
        <div>
            <h3>Vérifiez votre avatar NFT</h3>
            <input type="text" placeholder="Twitter Handle" onBlur={(e) => verifyTwitter(e.target.value)} />
            <input type="text" placeholder="Discord ID" onBlur={(e) => verifyDiscord(e.target.value)} />
            <p>{status}</p>
        </div>
    );
};

export default VerifyAvatar;
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract StakingPool is Ownable {
    IERC20 public cosmoCoin;
    uint256 public rewardRate = 100; // Récompenses par token
    mapping(address => uint256) public stakes;
    mapping(address => uint256) public lastClaimed;

    constructor(address _cosmoCoin) {
        cosmoCoin = IERC20(_cosmoCoin);
    }

    function stake(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        cosmoCoin.transferFrom(msg.sender, address(this), amount);
        stakes[msg.sender] += amount;
        lastClaimed[msg.sender] = block.timestamp;
    }

    function claimRewards() external {
        uint256 stakedTime = block.timestamp - lastClaimed[msg.sender];
        uint256 reward = (stakes[msg.sender] * stakedTime * rewardRate) / (30 days);
        lastClaimed[msg.sender] = block.timestamp;
        cosmoCoin.transfer(msg.sender, reward);
    }

    function unstake(uint256 amount) external {
        require(stakes[msg.sender] >= amount, "Not enough staked");
        stakes[msg.sender] -= amount;
        cosmoCoin.transfer(msg.sender, amount);
    }
}
export const stakeTokens = async (amount, account) => {
    await stakingContract.methods.stake(amount).send({ from: account });
};

export const claimRewards = async (account) => {
    await stakingContract.methods.claimRewards().send({ from: account });
};

export const unstakeTokens = async (amount, account) => {
    await stakingContract.methods.unstake(amount).send({ from: account });
};
