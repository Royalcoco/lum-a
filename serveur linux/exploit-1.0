# Prototype d'un noyau de système d'exploitation IA

import os
import time
import webbrowser
import json

class AI_OperatingSystem:
    def __init__(self):
        self.memory = {}  # Stockage des interactions
        self.task_list = []  # Gestion des tâches en cours

    def execute_command(self, command):
        """Interprète et exécute une commande donnée."""
        command = command.lower()
        
        if "ouvrir navigateur" in command:
            webbrowser.open("https://www.google.com")
            return "Navigateur ouvert."
        
        elif "heure" in command:
            return f"Heure actuelle : {time.strftime('%H:%M:%S')}"
        
        elif "mémoriser" in command:
            key_value = command.replace("mémoriser ", "").split("=")
            if len(key_value) == 2:
                self.memory[key_value[0].strip()] = key_value[1].strip()
                return f"Information mémorisée : {key_value[0]} = {key_value[1]}"
        
        elif "rappelle-moi" in command:
            key = command.replace("rappelle-moi ", "").strip()
            return self.memory.get(key, "Aucune information trouvée.")
        
        elif "ajouter tâche" in command:
            task = command.replace("ajouter tâche ", "").strip()
            self.task_list.append(task)
            return f"Tâche ajoutée : {task}"
        
        elif "lister tâches" in command:
            return "\n".join(self.task_list) if self.task_list else "Aucune tâche en cours."

        elif "ouvrir fichier" in command:
            filename = command.replace("ouvrir fichier ", "").strip()
            if os.path.exists(filename):
                os.system(f"open {filename}" if os.name == "posix" else f"start {filename}")
                return f"Ouverture de {filename}."
            else:
                return "Fichier non trouvé."

        else:
            return "Commande non reconnue."

    def run(self):
        """Boucle principale d'interaction."""
        print("Système d'exploitation IA - Luméa Jarvis v0.1")
        while True:
            command = input("\nEntrez une commande : ")
            if command.lower() in ["quitter", "exit", "stop"]:
                print("Arrêt du système...")
                break
            response = self.execute_command(command)
            print(f"> {response}")

# Démarrer le prototype du système d'exploitation IA
os_ai = AI_OperatingSystem()
os_ai.run()
