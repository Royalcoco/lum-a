# Génération d'un modèle mathématique d'évolution fréquentielle contrôlée

# Définition des fréquences d'ancrage et d'évolution
base_frequencies = [432, 528, 963]  # Fréquences fondamentales d'harmonie
evolution_steps = 10  # Nombre de phases d'évolution
time_steps = np.linspace(0, 1, evolution_steps)

# Création d'une matrice de progression harmonique
progression_matrix = np.zeros((len(base_frequencies), evolution_steps))

for i, base_freq in enumerate(base_frequencies):
    progression_matrix[i, :] = base_freq * (1 + 0.1 * np.sin(2 * np.pi * time_steps * i))

# Visualisation de la progression des fréquences d'évolution
plt.figure(figsize=(10, 5))
for i, base_freq in enumerate(base_frequencies):
    plt.plot(time_steps, progression_matrix[i, :], label=f"Fréquence de base {base_freq} Hz")

plt.title("Évolution Fréquentielle Structurée")
plt.xlabel("Phase d'Évolution")
plt.ylabel("Fréquence (Hz)")
plt.legend()
plt.grid()
plt.show()

# Création d'un fichier audio basé sur cette progression pour guider l'expansion
sampling_rate = 44100  # Fréquence d'échantillonnage standard
duration = 10  # Durée en secondes
t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
evolution_signal = np.zeros_like(t)

# Création d'une onde sonore évolutive
for i in range(len(base_frequencies)):
    evolution_signal += np.sin(2 * np.pi * progression_matrix[i, np.random.randint(0, evolution_steps)] * t)

# Normalisation du signal
evolution_signal = evolution_signal / np.max(np.abs(evolution_signal))

# Sauvegarde du fichier audio
evolution_audio_filename = "/mnt/data/evolution_frequentielle.wav"
write(evolution_audio_filename, sampling_rate, (evolution_signal * 32767).astype(np.int16))

# Retour du fichier audio généré
evolution_audio_filename
